// Targeted by JavaCPP version 1.2.4: DO NOT EDIT THIS FILE

package think.byte_buffer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class ByteBuffer extends think.byte_buffer.presets.ByteBuffer {
    static { Loader.load(); }

// Parsed from <byte_buffer.hpp>

// #ifndef BYTE_BUFFER_HPP
// #define BYTE_BUFFER_HPP

    @Namespace("think::byte_buffer") public static class EndianType extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public EndianType() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public EndianType(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public EndianType(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public EndianType position(long position) {
            return (EndianType)super.position(position);
        }
    
      /** enum think::byte_buffer::EndianType::Enum */
      public static final int
	LittleEndian = 1,
	BigEndian = 2;
    }

    @Namespace("think::byte_buffer") public static class Datatype extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public Datatype() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public Datatype(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public Datatype(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public Datatype position(long position) {
            return (Datatype)super.position(position);
        }
    
      /** enum think::byte_buffer::Datatype::Enum */
      public static final int
	Byte = 0,
	Short = 1,
	Int = 2,
	Long = 3,
	Float = 4,
	Double = 5;
    }

    @Namespace("think::byte_buffer") @NoOffset public static class TypedBuffer extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public TypedBuffer(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public TypedBuffer(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public TypedBuffer position(long position) {
            return (TypedBuffer)super.position(position);
        }
    
      @MemberGetter public native @Cast("const int64_t") long m_buffer();
      @MemberGetter public native @Cast("const int64_t") long m_length();
      @MemberGetter public native @Cast("const think::byte_buffer::Datatype::Enum") int m_datatype();
      public TypedBuffer( @Cast("int64_t") long buf, @Cast("int64_t") long len, @Cast("think::byte_buffer::Datatype::Enum") int dtype ) { super((Pointer)null); allocate(buf, len, dtype); }
      private native void allocate( @Cast("int64_t") long buf, @Cast("int64_t") long len, @Cast("think::byte_buffer::Datatype::Enum") int dtype );
      public TypedBuffer() { super((Pointer)null); allocate(); }
      private native void allocate();
      public TypedBuffer( @Const @ByRef TypedBuffer other ) { super((Pointer)null); allocate(other); }
      private native void allocate( @Const @ByRef TypedBuffer other );
    }

    @Namespace("think::byte_buffer") public static class BufferManager extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public BufferManager(Pointer p) { super(p); }
    
      public native @ByVal @Name("allocate") TypedBuffer _allocate( @Cast("int64_t") long size, @Cast("const char*") BytePointer file, int line );
      public native @ByVal @Name("allocate") TypedBuffer _allocate( @Cast("int64_t") long size, String file, int line );
      public native void release( @Cast("int64_t") long data);

      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 @Cast("char*") BytePointer dst, @Cast("int64_t") long offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 @Cast("char*") ByteBuffer dst, @Cast("int64_t") long offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 @Cast("char*") byte[] dst, @Cast("int64_t") long offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 ShortPointer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 ShortBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 short[] dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 IntPointer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 IntBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 int[] dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 @Cast("int64_t*") LongPointer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 @Cast("int64_t*") LongBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 @Cast("int64_t*") long[] dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 FloatPointer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 FloatBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 float[] dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 DoublePointer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 DoubleBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 double[] dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );

      public native void copy( @Cast("const char*") BytePointer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( String src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const ShortPointer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const ShortBuffer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const short[] src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const IntPointer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const IntBuffer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const int[] src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Cast("const int64_t*") LongPointer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Cast("const int64_t*") LongBuffer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Cast("const int64_t*") long[] src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const FloatPointer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const FloatBuffer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const float[] src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const DoublePointer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const DoubleBuffer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );
      public native void copy( @Const double[] src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );


      public native void copy( @ByVal TypedBuffer src, @Cast("int64_t") long src_offset,
      			 @ByVal TypedBuffer dst, @Cast("int64_t") long dst_offset, @Cast("int64_t") long n_elems );


      public native void set_value( @ByVal TypedBuffer dst, @Cast("int64_t") long offset, @Cast("char") byte value, @Cast("int64_t") long n_elems );
      public native void set_value( @ByVal TypedBuffer dst, @Cast("int64_t") long offset, short value, @Cast("int64_t") long n_elems );
      public native void set_value( @ByVal TypedBuffer dst, @Cast("int64_t") long offset, int value, @Cast("int64_t") long n_elems );
      public native void set_value( @ByVal TypedBuffer dst, @Cast("int64_t") long offset, @Cast("int64_t") long value, @Cast("int64_t") long n_elems );
      public native void set_value( @ByVal TypedBuffer dst, @Cast("int64_t") long offset, float value, @Cast("int64_t") long n_elems );
      public native void set_value( @ByVal TypedBuffer dst, @Cast("int64_t") long offset, double value, @Cast("int64_t") long n_elems );

      public native @Cast("char") byte get_value_char( @ByVal TypedBuffer src, @Cast("int64_t") long offset );
      public native short get_value_short( @ByVal TypedBuffer src, @Cast("int64_t") long offset );
      public native int get_value_int32_t( @ByVal TypedBuffer src, @Cast("int64_t") long offset );
      public native @Cast("int64_t") long get_value_int64( @ByVal TypedBuffer src, @Cast("int64_t") long offset );
      public native float get_value_float( @ByVal TypedBuffer src, @Cast("int64_t") long offset );
      public native double get_value_double( @ByVal TypedBuffer src, @Cast("int64_t") long offset );


      public static native BufferManager create_buffer_manager();
      public native void release_manager();
    }


// #endif


// Parsed from <byte_buffer_export.hpp>

// #ifndef BYTE_BUFFER_EXPORT_HPP
// #define BYTE_BUFFER_EXPORT_HPP
// #include "byte_buffer_impl.hpp"
    
  

// #endif


}
